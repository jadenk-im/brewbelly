{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get state() {\n    return this._delegate.state;\n  }\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n}\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  get name() {\n    return this._delegate.name;\n  }\n  get bucket() {\n    return this._delegate.bucket;\n  }\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n  get parent() {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  put(data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  putString(value) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n    let metadata = arguments.length > 2 ? arguments[2] : undefined;\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = Object.assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n  delete() {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n  useEmulator(host, port) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.3.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nconst STORAGE_TYPE = 'storage-compat';\nfunction factory(container, _ref2) {\n  let {\n    instanceIdentifier: url\n  } = _ref2;\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"names":["UploadTaskSnapshotCompat","constructor","_delegate","task","ref","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","then","onFulfilled","onRejected","on","type","nextOrObserver","error","completed","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","ListResultCompat","_service","prefixes","map","ReferenceCompat","items","nextPageToken","storage","name","bucket","fullPath","toString","child","childPath","reference","_getChild","root","parent","put","data","_throwIfRoot","uploadBytesResumable","putString","value","format","arguments","length","StringFormat","RAW","_dataFromString","metadataClone","Object","assign","contentType","_UploadTask","_FbsBlob","listAll","r","list","options","getMetadata","updateMetadata","getDownloadURL","delete","deleteObject","_location","path","_invalidRootOperation","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","_invalidArgument","refFromURL","url","_Location","makeFromUrl","host","e","setMaxUploadRetryTime","time","setMaxOperationRetryTime","useEmulator","port","connectStorageEmulator","test","STORAGE_TYPE","factory","container","_ref2","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","_TaskState","_TaskEvent","Storage","Reference","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion","version","firebase"],"sources":["/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/tasksnapshot.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/task.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/list.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/reference.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/service.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ((error: StorageError) => void) | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;;;;AAeG;MAQUA,wBAAwB;EAGnCC,YACWC,SAA6B,EAC7BC,IAAsB,EACtBC,GAAoB;IAFpB,IAAS,CAAAF,SAAA,GAATA,SAAS;IACT,IAAI,CAAAC,IAAA,GAAJA,IAAI;IACJ,IAAG,CAAAC,GAAA,GAAHA,GAAG;;EAGd,IAAIC,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAACH,SAAS,CAACG,gBAAgB;;EAExC,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACJ,SAAS,CAACI,QAA8B;;EAEtD,IAAIC,KAAKA,CAAA;IACP,OAAO,IAAI,CAACL,SAAS,CAACK,KAAK;;EAE7B,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACN,SAAS,CAACM,UAAU;;AAEnC;;AC5CD;;;;;;;;;;;;;;;AAeG;MAcUC,gBAAgB;EAC3BR,WACWA,CAAAC,SAAqB,EACbQ,IAAqB;IAD7B,IAAS,CAAAR,SAAA,GAATA,SAAS;IACD,IAAI,CAAAQ,IAAA,GAAJA,IAAI;IAWvB,KAAAC,MAAM,GAAG,IAAI,CAACT,SAAS,CAACS,MAAM,CAACC,IAAI,CAAC,IAAI,CAACV,SAAS,CAAC;IACnD,KAAAW,KAAK,GAAG,IAAI,CAACX,SAAS,CAACW,KAAK,CAACD,IAAI,CAAC,IAAI,CAACV,SAAS,CAAC;IACjD,KAAAY,KAAK,GAAG,IAAI,CAACZ,SAAS,CAACY,KAAK,CAACF,IAAI,CAAC,IAAI,CAACV,SAAS,CAAC;IACjD,KAAAa,MAAM,GAAG,IAAI,CAACb,SAAS,CAACa,MAAM,CAACH,IAAI,CAAC,IAAI,CAACV,SAAS,CAAC;;EAXnD,IAAIc,QAAQA,CAAA;IACV,OAAO,IAAIhB,wBAAwB,CACjC,IAAI,CAACE,SAAS,CAACc,QAAQ,EACvB,IAAI,EACJ,IAAI,CAACN,IAAI,CACV;;EAQHO,IAAIA,CACFC,WAA+D,EAC/DC,UAAkD;IAElD,OAAO,IAAI,CAACjB,SAAS,CAACe,IAAI,CAACD,QAAQ,IAAG;MACpC,IAAIE,WAAW,EAAE;QACf,OAAOA,WAAW,CAChB,IAAIlB,wBAAwB,CAACgB,QAAQ,EAAE,IAAI,EAAE,IAAI,CAACN,IAAI,CAAC,CACxD;MACF;KACF,EAAES,UAAU,CAAC;;EAGhBC,EAAEA,CACAC,IAAe,EACfC,cAG8C,EAC9CC,KAA8C,EAC9CC,SAA6B;IAE7B,IAAIC,qBAAqB,GAGkBC,SAAS;IACpD,IAAI,CAAC,CAACJ,cAAc,EAAE;MACpB,IAAI,OAAOA,cAAc,KAAK,UAAU,EAAE;QACxCG,qBAAqB,GAAIE,YAAgC,IACvDL,cAAc,CACZ,IAAItB,wBAAwB,CAAC2B,YAAY,EAAE,IAAI,EAAE,IAAI,CAACjB,IAAI,CAAC,CAC5D;MACJ,OAAM;QACLe,qBAAqB,GAAG;UACtBG,IAAI,EAAE,CAAC,CAACN,cAAc,CAACM,IAAI,GACtBD,YAAgC,IAC/BL,cAAc,CAACM,IAAK,CAClB,IAAI5B,wBAAwB,CAAC2B,YAAY,EAAE,IAAI,EAAE,IAAI,CAACjB,IAAI,CAAC,CAC5D,GACHgB,SAAS;UACbG,QAAQ,EAAEP,cAAc,CAACO,QAAQ,IAAIH,SAAS;UAC9CH,KAAK,EAAED,cAAc,CAACC,KAAK,IAAIG;SAChC;MACF;IACF;IACD,OAAO,IAAI,CAACxB,SAAS,CAACkB,EAAE,CACtBC,IAAI,EACJI,qBAAqB,EACrBF,KAAK,IAAIG,SAAS,EAClBF,SAAS,IAAIE,SAAS,CACvB;;AAEJ;MC9EYI,gBAAgB;EAC3B7B,WACWA,CAAAC,SAAqB,EACb6B,QAA8B;IADtC,IAAS,CAAA7B,SAAA,GAATA,SAAS;IACD,IAAQ,CAAA6B,QAAA,GAARA,QAAQ;;EAG3B,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAAC9B,SAAS,CAAC8B,QAAQ,CAACC,GAAG,CAChC7B,GAAG,IAAI,IAAI8B,eAAe,CAAC9B,GAAG,EAAE,IAAI,CAAC2B,QAAQ,CAAC,CAC/C;;EAEH,IAAII,KAAKA,CAAA;IACP,OAAO,IAAI,CAACjC,SAAS,CAACiC,KAAK,CAACF,GAAG,CAC7B7B,GAAG,IAAI,IAAI8B,eAAe,CAAC9B,GAAG,EAAE,IAAI,CAAC2B,QAAQ,CAAC,CAC/C;;EAEH,IAAIK,aAAaA,CAAA;IACf,OAAO,IAAI,CAAClC,SAAS,CAACkC,aAAa,IAAI,IAAI;;AAE9C;;ACzCD;;;;;;;;;;;;;;;AAeG;MA+BUF,eAAe;EAG1BjC,WACWA,CAAAC,SAA2B,EAC7BmC,OAA6B;IAD3B,IAAS,CAAAnC,SAAA,GAATA,SAAS;IACX,IAAO,CAAAmC,OAAA,GAAPA,OAAO;;EAGhB,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACpC,SAAS,CAACoC,IAAI;;EAG5B,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACrC,SAAS,CAACqC,MAAM;;EAG9B,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACtC,SAAS,CAACsC,QAAQ;;EAGhCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACvC,SAAS,CAACuC,QAAQ,EAAE;;EAGlC;;;;AAIG;EACHC,KAAKA,CAACC,SAAiB;IACrB,MAAMC,SAAS,GAAGC,SAAS,CAAC,IAAI,CAAC3C,SAAS,EAAEyC,SAAS,CAAC;IACtD,OAAO,IAAIT,eAAe,CAACU,SAAS,EAAE,IAAI,CAACP,OAAO,CAAC;;EAGrD,IAAIS,IAAIA,CAAA;IACN,OAAO,IAAIZ,eAAe,CAAC,IAAI,CAAChC,SAAS,CAAC4C,IAAI,EAAE,IAAI,CAACT,OAAO,CAAC;;EAG/D;;;AAGG;EACH,IAAIU,MAAMA,CAAA;IACR,MAAMH,SAAS,GAAG,IAAI,CAAC1C,SAAS,CAAC6C,MAAM;IACvC,IAAIH,SAAS,IAAI,IAAI,EAAE;MACrB,OAAO,IAAI;IACZ;IACD,OAAO,IAAIV,eAAe,CAACU,SAAS,EAAE,IAAI,CAACP,OAAO,CAAC;;EAGrD;;;;;AAKG;EACHW,GAAGA,CACDC,IAAqC,EACrC3C,QAA6B;IAE7B,IAAI,CAAC4C,YAAY,CAAC,KAAK,CAAC;IACxB,OAAO,IAAIzC,gBAAgB,CACzB0C,oBAAoB,CAAC,IAAI,CAACjD,SAAS,EAAE+C,IAAI,EAAE3C,QAA0B,CAAC,EACtE,IAAI,CACL;;EAGH;;;;;;AAMG;EACH8C,SAASA,CACPC,KAAa,EAEkB;IAAA,IAD/BC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA7B,SAAA,GAAA6B,SAAA,MAAuBE,YAAY,CAACC,GAAG;IAAA,IACvCpD,QAA+B,GAAAiD,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAA7B,SAAA;IAE/B,IAAI,CAACwB,YAAY,CAAC,WAAW,CAAC;IAC9B,MAAMD,IAAI,GAAGU,eAAe,CAACL,MAAM,EAAED,KAAK,CAAC;IAC3C,MAAMO,aAAa,GAAAC,MAAA,CAAAC,MAAA,KAAQxD,QAAQ,CAAE;IACrC,IAAIsD,aAAa,CAAC,aAAa,CAAC,IAAI,IAAI,IAAIX,IAAI,CAACc,WAAW,IAAI,IAAI,EAAE;MACpEH,aAAa,CAAC,aAAa,CAAC,GAAGX,IAAI,CAACc,WAAW;IAChD;IACD,OAAO,IAAItD,gBAAgB,CACzB,IAAIuD,WAAW,CACb,IAAI,CAAC9D,SAAuB,EAC5B,IAAI+D,QAAQ,CAAChB,IAAI,CAACA,IAAI,EAAE,IAAI,CAAC,EAC7BW,aAAuD,CAC1C,EACf,IAAI,CACL;;EAGH;;;;;;;;;;;;;;;;AAgBG;EACHM,OAAOA,CAAA;IACL,OAAOA,OAAO,CAAC,IAAI,CAAChE,SAAS,CAAC,CAACe,IAAI,CACjCkD,CAAC,IAAI,IAAIrC,gBAAgB,CAACqC,CAAC,EAAE,IAAI,CAAC9B,OAAO,CAAC,CAC3C;;EAGH;;;;;;;;;;;;;;;;;;AAkBG;EACH+B,IAAIA,CAACC,OAAkC;IACrC,OAAOD,IAAI,CAAC,IAAI,CAAClE,SAAS,EAAEmE,OAAO,IAAI3C,SAAS,CAAC,CAACT,IAAI,CACpDkD,CAAC,IAAI,IAAIrC,gBAAgB,CAACqC,CAAC,EAAE,IAAI,CAAC9B,OAAO,CAAC,CAC3C;;EAGH;;;;AAIG;EACHiC,WAAWA,CAAA;IACT,OAAOA,WAAW,CAAC,IAAI,CAACpE,SAAS,CAAgC;;EAGnE;;;;;;;;AAQG;EACHqE,cAAcA,CACZjE,QAAgC;IAEhC,OAAOiE,cAAc,CACnB,IAAI,CAACrE,SAAS,EACdI,QAA4B,CACE;;EAGlC;;;AAGG;EACHkE,cAAcA,CAAA;IACZ,OAAOA,cAAc,CAAC,IAAI,CAACtE,SAAS,CAAC;;EAGvC;;;AAGG;EACHuE,MAAMA,CAAA;IACJ,IAAI,CAACvB,YAAY,CAAC,QAAQ,CAAC;IAC3B,OAAOwB,YAAY,CAAC,IAAI,CAACxE,SAAS,CAAC;;EAG7BgD,YAAYA,CAACZ,IAAY;IAC/B,IAAK,IAAI,CAACpC,SAAwB,CAACyE,SAAS,CAACC,IAAI,KAAK,EAAE,EAAE;MACxD,MAAMC,qBAAqB,CAACvC,IAAI,CAAC;IAClC;;AAEJ;;AC9OD;;;;;;;;;;;;;;;AAeG;AAgBH;;;AAGG;MACUwC,oBAAoB;EAG/B7E,WAAmBA,CAAA8E,GAAgB,EAAW7E,SAA0B;IAArD,IAAG,CAAA6E,GAAA,GAAHA,GAAG;IAAwB,IAAS,CAAA7E,SAAA,GAATA,SAAS;;EAEvD,IAAI8E,qBAAqBA,CAAA;IACvB,OAAO,IAAI,CAAC9E,SAAS,CAAC8E,qBAAqB;;EAG7C,IAAIC,kBAAkBA,CAAA;IACpB,OAAO,IAAI,CAAC/E,SAAS,CAAC+E,kBAAkB;;EAG1C;;;AAGG;EACH7E,GAAGA,CAACwE,IAAa;IACf,IAAIM,KAAK,CAACN,IAAI,CAAC,EAAE;MACf,MAAMO,gBAAgB,CACpB,oEAAoE,CACrE;IACF;IACD,OAAO,IAAIjD,eAAe,CAAC9B,GAAG,CAAC,IAAI,CAACF,SAAS,EAAE0E,IAAI,CAAC,EAAE,IAAI,CAAC;;EAG7D;;;AAGG;EACHQ,UAAUA,CAACC,GAAW;IACpB,IAAI,CAACH,KAAK,CAACG,GAAG,CAAC,EAAE;MACf,MAAMF,gBAAgB,CACpB,2EAA2E,CAC5E;IACF;IACD,IAAI;MACFG,SAAS,CAACC,WAAW,CAACF,GAAG,EAAG,IAAI,CAACnF,SAAkC,CAACsF,IAAI,CAAC;IAC1E,EAAC,OAAOC,CAAC,EAAE;MACV,MAAMN,gBAAgB,CACpB,gEAAgE,CACjE;IACF;IACD,OAAO,IAAIjD,eAAe,CAAC9B,GAAG,CAAC,IAAI,CAACF,SAAS,EAAEmF,GAAG,CAAC,EAAE,IAAI,CAAC;;EAG5DK,qBAAqBA,CAACC,IAAY;IAChC,IAAI,CAACzF,SAAS,CAAC+E,kBAAkB,GAAGU,IAAI;;EAG1CC,wBAAwBA,CAACD,IAAY;IACnC,IAAI,CAACzF,SAAS,CAAC8E,qBAAqB,GAAGW,IAAI;;EAG7CE,WAAWA,CACTL,IAAY,EACZM,IAAY,EAGN;IAAA,IAFNzB,OAAA,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA7B,SAAA,GAAA6B,SAAA,MAEI,EAAE;IAENwC,sBAAsB,CAAC,IAAI,CAAC7F,SAAS,EAAEsF,IAAI,EAAEM,IAAI,EAAEzB,OAAO,CAAC;;AAE9D;AAED,SAASa,KAAKA,CAACN,IAAa;EAC1B,OAAO,iBAAiB,CAACoB,IAAI,CAACpB,IAAc,CAAC;AAC/C;;;;ACtGA;;;;;;;;;;;;;;;AAeG;AAuBH;;AAEG;AACH,MAAMqB,YAAY,GAAG,gBAAgB;AAErC,SAASC,OAAOA,CACdC,SAA6B,EAAAC,KAAA,EACsB;EAAA,IAAnD;IAAEC,kBAAkB,EAAEhB;EAAG,CAA0B,GAAAe,KAAA;;EAGnD,MAAMrB,GAAG,GAAGoB,SAAS,CAACG,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,EAAE;EAC9D,MAAMC,UAAU,GAAGL,SAAS,CACzBG,WAAW,CAAC,SAAS,CAAC,CACtBC,YAAY,CAAC;IAAEE,UAAU,EAAEpB;EAAG,CAAE,CAAC;EAEpC,MAAMqB,oBAAoB,GAAyB,IAAI5B,oBAAoB,CACzEC,GAAG,EACHyB,UAAU,CACX;EACD,OAAOE,oBAAoB;AAC7B;AAEM,SAAUC,eAAeA,CAACC,QAA4B;EAC1D,MAAMC,gBAAgB,GAAG;;eAEvBC,UAAS;eACTC,UAAS;IACTtD,YAAY;IACZuD,OAAO,EAAElC,oBAAoB;IAC7BmC,SAAS,EAAE/E;GACZ;EACD0E,QAAQ,CAACM,QAAQ,CAACC,iBAAiB,CACjC,IAAIC,SAAS,CAACnB,YAAY,EAAEC,OAAO,EAAuB,qCACvDmB,eAAe,CAACR,gBAAgB,CAAC,CACjCS,oBAAoB,CAAC,IAAI,CAAC,CAC9B;EAEDV,QAAQ,CAACW,eAAe,CAACjF,IAAI,EAAEkF,OAAO,CAAC;AACzC;AAEAb,eAAe,CAACc,QAAyC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}