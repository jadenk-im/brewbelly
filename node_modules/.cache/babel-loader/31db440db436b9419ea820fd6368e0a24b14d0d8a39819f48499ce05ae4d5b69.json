{"ast":null,"code":"import _classCallCheck from \"/Users/jadenkim/git/work/brewbelly/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jadenkim/git/work/brewbelly/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll as _listAll, list as _list, getMetadata as _getMetadata, updateMetadata as _updateMetadata, getDownloadURL as _getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref as _ref2, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskSnapshotCompat = /*#__PURE__*/function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    _classCallCheck(this, UploadTaskSnapshotCompat);\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  _createClass(UploadTaskSnapshotCompat, [{\n    key: \"bytesTransferred\",\n    get: function get() {\n      return this._delegate.bytesTransferred;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._delegate.metadata;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._delegate.state;\n    }\n  }, {\n    key: \"totalBytes\",\n    get: function get() {\n      return this._delegate.totalBytes;\n    }\n  }]);\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskCompat = /*#__PURE__*/function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    _classCallCheck(this, UploadTaskCompat);\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  _createClass(UploadTaskCompat, [{\n    key: \"snapshot\",\n    get: function get() {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    }\n  }, {\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      var _this = this;\n      return this._delegate.then(function (snapshot) {\n        if (onFulfilled) {\n          return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n        }\n      }, onRejected);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this2 = this;\n      var wrappedNextOrObserver = undefined;\n      if (!!nextOrObserver) {\n        if (typeof nextOrObserver === 'function') {\n          wrappedNextOrObserver = function wrappedNextOrObserver(taskSnapshot) {\n            return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n          };\n        } else {\n          wrappedNextOrObserver = {\n            next: !!nextOrObserver.next ? function (taskSnapshot) {\n              return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n            } : undefined,\n            complete: nextOrObserver.complete || undefined,\n            error: nextOrObserver.error || undefined\n          };\n        }\n      }\n      return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n    }\n  }]);\n  return UploadTaskCompat;\n}();\nvar ListResultCompat = /*#__PURE__*/function () {\n  function ListResultCompat(_delegate, _service) {\n    _classCallCheck(this, ListResultCompat);\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  _createClass(ListResultCompat, [{\n    key: \"prefixes\",\n    get: function get() {\n      var _this3 = this;\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this3._service);\n      });\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      var _this4 = this;\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this4._service);\n      });\n    }\n  }, {\n    key: \"nextPageToken\",\n    get: function get() {\n      return this._delegate.nextPageToken || null;\n    }\n  }]);\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ReferenceCompat = /*#__PURE__*/function () {\n  function ReferenceCompat(_delegate, storage) {\n    _classCallCheck(this, ReferenceCompat);\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  _createClass(ReferenceCompat, [{\n    key: \"name\",\n    get: function get() {\n      return this._delegate.name;\n    }\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._delegate.bucket;\n    }\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._delegate.fullPath;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._delegate.toString();\n    }\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\n  }, {\n    key: \"child\",\n    value: function child(childPath) {\n      var reference = _getChild(this._delegate, childPath);\n      return new ReferenceCompat(reference, this.storage);\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    }\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var reference = this._delegate.parent;\n      if (reference == null) {\n        return null;\n      }\n      return new ReferenceCompat(reference, this.storage);\n    }\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n  }, {\n    key: \"put\",\n    value: function put(data, metadata) {\n      this._throwIfRoot('put');\n      return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n    }\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n  }, {\n    key: \"putString\",\n    value: function putString(value) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n      var metadata = arguments.length > 2 ? arguments[2] : undefined;\n      this._throwIfRoot('putString');\n      var data = _dataFromString(format, value);\n      var metadataClone = Object.assign({}, metadata);\n      if (metadataClone['contentType'] == null && data.contentType != null) {\n        metadataClone['contentType'] = data.contentType;\n      }\n      return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n    }\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\n  }, {\n    key: \"listAll\",\n    value: function listAll() {\n      var _this5 = this;\n      return _listAll(this._delegate).then(function (r) {\n        return new ListResultCompat(r, _this5.storage);\n      });\n    }\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\n  }, {\n    key: \"list\",\n    value: function list(options) {\n      var _this6 = this;\n      return _list(this._delegate, options || undefined).then(function (r) {\n        return new ListResultCompat(r, _this6.storage);\n      });\n    }\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      return _getMetadata(this._delegate);\n    }\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\n  }, {\n    key: \"updateMetadata\",\n    value: function updateMetadata(metadata) {\n      return _updateMetadata(this._delegate, metadata);\n    }\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\n  }, {\n    key: \"getDownloadURL\",\n    value: function getDownloadURL() {\n      return _getDownloadURL(this._delegate);\n    }\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this._throwIfRoot('delete');\n      return deleteObject(this._delegate);\n    }\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._delegate._location.path === '') {\n        throw _invalidRootOperation(name);\n      }\n    }\n  }]);\n  return ReferenceCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nvar StorageServiceCompat = /*#__PURE__*/function () {\n  function StorageServiceCompat(app, _delegate) {\n    _classCallCheck(this, StorageServiceCompat);\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  _createClass(StorageServiceCompat, [{\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._delegate.maxOperationRetryTime;\n    }\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._delegate.maxUploadRetryTime;\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\n  }, {\n    key: \"ref\",\n    value: function ref(path) {\n      if (isUrl(path)) {\n        throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n      }\n      return new ReferenceCompat(_ref2(this._delegate, path), this);\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isUrl(url)) {\n        throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n      }\n      try {\n        _Location.makeFromUrl(url, this._delegate.host);\n      } catch (e) {\n        throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n      }\n      return new ReferenceCompat(_ref2(this._delegate, url), this);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      this._delegate.maxUploadRetryTime = time;\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      this._delegate.maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      connectStorageEmulator(this._delegate, host, port, options);\n    }\n  }]);\n  return StorageServiceCompat;\n}();\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\nvar name = \"@firebase/storage-compat\";\nvar version = \"0.3.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage-compat';\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  // Dependencies\n  var app = container.getProvider('app-compat').getImmediate();\n  var storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  var storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"names":["UploadTaskSnapshotCompat","_delegate","task","ref","_classCallCheck","_createClass","key","get","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","value","then","onFulfilled","onRejected","_this","on","type","nextOrObserver","error","completed","_this2","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","ListResultCompat","_service","_this3","prefixes","map","ReferenceCompat","_this4","items","nextPageToken","storage","name","bucket","fullPath","toString","child","childPath","reference","_getChild","root","parent","put","data","_throwIfRoot","uploadBytesResumable","putString","format","arguments","length","StringFormat","RAW","_dataFromString","metadataClone","Object","assign","contentType","_UploadTask","_FbsBlob","listAll","_this5","r","list","options","_this6","getMetadata","updateMetadata","getDownloadURL","_delete","deleteObject","_location","path","_invalidRootOperation","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","_invalidArgument","refFromURL","url","_Location","makeFromUrl","host","e","setMaxUploadRetryTime","time","setMaxOperationRetryTime","useEmulator","port","connectStorageEmulator","test","STORAGE_TYPE","factory","container","_ref3","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","_TaskState","_TaskEvent","Storage","Reference","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion","version","firebase"],"sources":["/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/tasksnapshot.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/task.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/list.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/reference.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/service.ts","/Users/jadenkim/git/work/brewbelly/node_modules/@firebase/storage-compat/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ((error: StorageError) => void) | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}